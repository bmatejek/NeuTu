#include "myskeletonwrapper.h"

MySkeletonWrapper::MySkeletonWrapper(){
    stack = new Stack;
    stack->array = NULL;
    stack->width = 0;
    stack->height = 0;
    stack->depth = 0;

    minObjSize = 20;
    minLen = 50;
}

MySkeletonWrapper::MySkeletonWrapper(int pdepth, int pheight, int pwidth){
    stack = new Stack;
    stack->array = NULL;
    resize(pdepth, pheight, pwidth);

    minObjSize = 20;
    minLen = 50;

}

void MySkeletonWrapper::resize(int pdepth, int pheight, int pwidth){
    stack->kind=GREY;
    stack->width=pwidth;
    stack->height=pheight;
    stack->depth=pdepth;
    if (stack->array != NULL)
        delete (stack->array);
    stack->array = new uint8[(stack->width)*(stack->height)*(stack->depth)];
}

void MySkeletonWrapper::createBinaryVolume(uint* psegmentation_data, uint region_id){

    if(stack->array==NULL){
        printf("Stack has not been initialized\n");
        return;
    }

    size_t plane_size = (stack->height)*(stack->width);
    size_t position, i, j, k;

    Zero_Stack(stack);

    for(i=0; i<stack->depth; i++){
        for(j=0; j<stack->height; j++){
            for(k=0; k<stack->width; k++){
                position = i*plane_size + j*(stack->width) + k;
                if (psegmentation_data[position] == region_id)
                    Set_Stack_Pixel(stack, k,j,i,0,1);
                else
                    Set_Stack_Pixel(stack, k,j,i,0,0);

            }
        }
    }

    //C_Stack::write("tmptree.tif",stack);
}

void MySkeletonWrapper::computeSkeleton(){

    endPts.clear();

    skeletonizer.setMinObjSize(minObjSize);
    skeletonizer.setLengthThreshold(minLen);

    skeletonizer.setRebase(true);
    wholeTree = skeletonizer.makeSkeleton(stack);

    // found in /home/paragt/install/Neutu/NeuTu/neurolabi/gui/zswctree.h
    //ZSwcTree::DepthFirstIterator hookIter(wholeTree);
    //ZSwcTree::RegularRootIterator hookIter(wholeTree);
    //ZSwcTree::LeafIterator hookIter(wholeTree);

    ZSwcTree::TerminalIterator hookIter(wholeTree);
    while (hookIter.hasNext()) {
        Swc_Tree_Node *tn = hookIter.next();
        if (SwcTreeNode::isRegular(tn)) {
            double nodex = SwcTreeNode::x(tn);
            double nodey = SwcTreeNode::y(tn);
            double nodez = SwcTreeNode::z(tn);
            double noder = SwcTreeNode::radius(tn);

            endPts.push_back(LeafStruct(nodez,nodey,nodex));

            std::cout << "leaf at (" << nodex <<", "<< nodey<< ", " << nodez << ")"<<std::endl;
        }

    }
}


void MySkeletonWrapper::saveTree(std::string outputPath){
    if (wholeTree != NULL) {
      wholeTree->save(outputPath.c_str());
      std::cout << outputPath << " saved" << std::endl;
    }
    else {
      // write empty file
      FILE *fp = fopen(outputPath.c_str(), "w");
      if (!fp) return;
      
      fprintf(fp, "# Generated by NeuTu (https://github.com/janelia-flyem/NeuTu)");
      
      // close the file
      fclose(fp);
      
      std::cout << "Empty tree." << std::endl;
      return ;
    }
}
